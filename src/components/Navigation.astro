---
import ResponsiveToggle from "./ResponsiveToggle.astro";
import { DarkMode } from "accessible-astro-components";
import { Image } from "astro:assets";
---

<div id="main-navigation" class="is-desktop border-b border-b-[var(--action-color)] pb-4 pt-8">
  <div class="container flex flex-col">
    <div class="flex justify-between">
      <a href="/" class="flex items-center gap-2 !no-underline">
        <Image src="/logo.png" alt="My Logo" width="36" height="36" />
        <span class="font-bold text-[var(--secondary-100)] hover:text-[var(--secondary-300)]">hup - hup</span>
      </a>
      <div class="wrapper">
        <nav class="desktop-menu" aria-label="Main navigation desktop">
          <ul class="menu">
            <slot />
          </ul>
        </nav>
        <div id="darkmode-toggle">
          <DarkMode />
        </div>
        <ResponsiveToggle />
      </div>
    </div>
    <div class="flex w-full justify-end">
      <nav class="mobile-menu" aria-label="Main navigation mobile">
        <ul class="menu">
          <slot />
        </ul>
      </nav>
    </div>
  </div>
</div>

<script>
  // variables
  const mainNav = document.querySelector("#main-navigation");
  const mainMenu = mainNav?.querySelector("ul");

  // functions
  const setActiveMenuItem = () => {
    const mobileDesktopMenus = mainNav?.querySelectorAll("nav > ul");
    const currenPathname = window.location.pathname;

    mobileDesktopMenus?.forEach((menu) => {
      const menuItems = [...menu.querySelectorAll('a:not([rel*="external"])')] as HTMLAnchorElement[];

      menuItems.forEach((menuItem) => {
        if (currenPathname.includes(menuItem.pathname.replaceAll("/", "")) && menuItem.textContent !== "Home") {
          menuItem.classList.add("is-active");
          menuItem.setAttribute("aria-current", "page");
        } else if (menuItem.textContent === "Home" && currenPathname === "/") {
          menuItem.classList.add("is-active");
          menuItem.setAttribute("aria-current", "page");
        }
      });
    });
  };

  const checkMenuSize = () => {
    const mainNavWidth = mainNav?.getBoundingClientRect().width ?? 0;
    const desktopMenuWidth = document.querySelector(".desktop-menu")?.getBoundingClientRect().width;
    const logoWidthBuffer = 300;
    const totalMenuWidth = Math.round(desktopMenuWidth ?? 0) + logoWidthBuffer;

    if (totalMenuWidth >= mainNavWidth) {
      mainNav?.classList.remove("is-desktop");
      mainNav?.classList.add("is-mobile");
    } else if (totalMenuWidth <= mainNavWidth) {
      mainNav?.classList.add("is-desktop");
      mainNav?.classList.remove("is-mobile");
    }
  };

  // execution
  mainMenu &&
    mainMenu.addEventListener("keydown", (event) => {
      const element = event.target as Element;
      const currentMenuItem = element.closest("li");
      const menuItems = [...mainMenu.querySelectorAll(".menu-item")];
      const currentIndex = menuItems.findIndex((item) => item === currentMenuItem);

      const key = event.key;
      let targetItem;

      if (key === "ArrowRight" && currentMenuItem) {
        if (menuItems.indexOf(currentMenuItem) === menuItems.length - 1) {
          targetItem = menuItems[0];
        } else {
          targetItem = menuItems[currentIndex + 1];
        }
      }

      if (key === "ArrowLeft" && currentMenuItem) {
        if (menuItems.indexOf(currentMenuItem) === 0) {
          targetItem = menuItems[menuItems.length - 1];
        } else {
          targetItem = menuItems[currentIndex - 1];
        }
      }

      if (key === "Escape") {
        targetItem = menuItems[0];
      }

      if (targetItem) {
        targetItem.querySelector("a, button, input").focus();
      }
    });

  setActiveMenuItem();
  checkMenuSize();

  window.addEventListener("resize", checkMenuSize);
  window.addEventListener("click", (event) => {
    const element = event.target as Element;
    if (!element.hasAttribute("aria-haspopup") && !element.classList.contains("mobile-menu")) {
      mainNav?.classList.remove("show");
    }
  });
</script>

<style lang="scss" is:global>
  @use "../assets/scss/base/breakpoint" as *;
  @use "../assets/scss/base/outline" as *;

  #main-navigation {
    &.is-desktop {
      .desktop-menu {
        visibility: visible;
        position: static;
      }

      .mobile-menu {
        display: none;
      }

      .darkmode-toggle {
        margin-top: -6px;
      }
    }

    &.is-mobile {
      flex-direction: column;

      .mobile-menu {
        display: none;

        &.show {
          display: block;
        }
      }

      .desktop-menu {
        visibility: hidden;
        z-index: -99;
        position: absolute;
        left: 0;
      }

      .responsive-toggle {
        display: block;
      }
    }

    .wrapper {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    nav {
      > ul {
        display: flex;
        gap: 1.5rem;
        list-style-type: none;

        a,
        button {
          text-decoration: none;
          font-size: 1.125rem;
          line-height: 1.6875rem;
          transition: color 0.15s ease-in-out;
        }

        a:hover,
        a:focus,
        .is-active {
          text-decoration: underline;
          text-decoration-thickness: 1px;
          text-decoration-style: solid;
          text-underline-offset: 7px;
        }

        .is-active {
          font-weight: bold;
        }
      }
    }

    .mobile-menu {
      position: absolute;
      z-index: 10;
      right: 0;
      width: 50%;
      padding: 8px;
      border-radius: 16px;
      background-color: var(--neutral-background);

      > ul {
        flex-direction: column;

        ul {
          position: relative;
          margin-top: 1rem;
        }
      }

      a,
      button {
        display: block;
        width: 100%;
        padding: 0.5rem 0;
      }
    }
  }

  .darkmode-toggle {
    padding: 0;
    border: none;

    svg {
      width: 30px;
      margin-top: 4px;
    }

    svg path {
      fill: var(--action-color);
      transition: fill 0.2s ease-in-out;
    }

    &:hover {
      svg path {
        fill: var(--action-color-state);
      }
    }

    &:focus {
      @include outline;

      &:not(:focus-visible) {
        outline: none;
        box-shadow: none;
      }
    }
  }
</style>
