---
import DefaultLayout from "../layouts/DefaultLayout.astro";
import Hero from "../components/Hero.astro";
import SkillCard from "../components/SkillCard.astro";
import Counter from "../components/Counter.astro";
import ContentMedia from "../components/ContentMedia.astro";

type Skill = {
  title: string;
  description?: string;
  icon: string;
};

const skills: Skill[] = [
  {
    title: "TypeScript (JS)",
    icon: "devicon:typescript",
    description:
      "Been using JS pretty much ever since I began learning programming, all the way through my whole career so far. Been using JS pretty much ever since I began learning programming, all the way through my whole career so far. Been using JS pretty much ever since I began learning programming, all the way through my whole career so far. Been using JS pretty much ever since I began learning programming, all the way through my whole career so far. ",
  },
  {
    title: "React",
    icon: "devicon:react",
    description: "A core part of my experience, used it for my practical Bachelor's thesis and most of my career.",
  },
  {
    title: ".NET Core",
    icon: "devicon:dotnetcore",
    description: "",
  },
  {
    title: "Next.js",
    icon: "devicon:nextjs",
    description: "",
  },
  {
    title: "Node.js",
    icon: "devicon:nodejs",
    description: "",
  },
  {
    title: "Astro",
    icon: "devicon:astro",
    description: "",
  },
];
---

<DefaultLayout title="Home" showCallToAction>
  <Hero />
  <section class="my-32 md:my-64">
    <div class="container">
      <h2 class="mb-16 text-6xl">Skills</h2>
      <div class="grid grid-cols-1 gap-12 md:grid-cols-2 lg:grid-cols-3">
        {
          skills.map((skill) => (
            <SkillCard key={skill.title} icon={skill.icon} title={skill.title}>
              {skill.description}
            </SkillCard>
          ))
        }
      </div>
    </div>
  </section>
  <ContentMedia imgSrc="/accessible-components.webp">
    <h2>Accessible Components</h2>
    <p class="text-2xl">
      This theme provides plenty of tried and tested Accessible Astro Components. Some are native to this theme and a
      lot of others are integrated using a <a href="https://github.com/markteekman/accessible-astro-components"
        >separate package</a
      >. They'll get you up and running in building an accessible solution for your visitors.
    </p>
  </ContentMedia>
  <ContentMedia imgSrc="/wcag-compliant.webp" reverseImg={true}>
    <h2>WCAG 2.1 AA Compliant</h2>
    <p class="text-2xl">
      Using semantic HTML, landmarks, skip links, screen reader friendly content, aria-labels, keyboard accessible
      navigation and components, clear outlines and tab indicators and the right color contrast, you're more certain of
      reaching WCAG AA compliance.
    </p>
  </ContentMedia>
  <section class="mb-16 mt-32 md:mb-32 md:mt-64">
    <div class="container">
      <h2 class="mb-16 text-6xl">Counters</h2>
      <div class="grid grid-cols-1 gap-12 sm:grid-cols-2 md:grid-cols-4">
        <Counter count="130" title="Stars" sub="On GitHub" />
        <Counter count="17" title="Accessible" sub="Components" />
        <Counter count="500" title="Commits" sub="Merged" />
        <Counter count="18+" title="Months" sub="Since launch" />
      </div>
    </div>
  </section>
</DefaultLayout>
